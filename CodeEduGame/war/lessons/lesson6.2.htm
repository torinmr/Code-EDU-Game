<h3>Mission 6.2: Total Value With More than Two Cards &mdash; Make the Loop Loop</h3>
<p>Every time we run through the loop, we need to add the value of the current spot in the array to the variable <span class="variables">sum</span> and then increment the counter by one to keep track of our place in the array. Inside the braces { } of the while loop, write
<div class="code">sum = sum + handValue[counter];
counter = counter + 1;</div>
<p>Donâ€™t get scared by all the variables, its simpler than you think. Notice var appears nowhere in this line: You only use it when creating a variable. The first line sets <span class="variables">sum</span> to itself (initially zero) plus the value of the card at position counter. This may seem a little strange, but recall that counter is just a variable representing a number. It starts at 0, so this line is initially just like saying</p> 
<div class="code">sum = sum + handValue[0];</div>
<p>The second line sets <span class="variables">counter</span> to itself plus one, so the second time it runs through the loop the first line will get the value at position 1, the third time will get the value at positon 2, and so on. Remember when we promised you'd see a case where the order of commands was crucial? This is one. It is important that the adjustment of <span class="variables">counter</span> occurs after that of <span class="variables">sum</span> or else the first spot would be skipped.</p>
<p>Now we just need to replace somethingtrue with a boolean expression telling the computer to run through the loop until it has gone through the whole hand. Since <span class="variables">counter</span> is counting the position in the hand, we can compare this value to <span class="variables">length</span>, the variable that represents the size of the hand. Inside the parentheses following while, write</p>
<div class="code">counter &lt; length</div>
<p>Some tricky stuff: Why did we use &lt; instead of &lt;=? Remember that <span class="variables">counter</span>, like the positions in an array, starts at 0. However, when <span class="variables">sizeof()</span> counts and returns the size of an array, it starts at 1. So, if you have an array with 4 items in it, the last position is 3 and <span class="variables">sizeof()</span> will return 4. 3 is the last number that is less than 4, so position 3 is the last position that will be added to <span class="variables">sum</span>. Once <span class="variables">counter</span> is incremented to 4, the statement in the while loop will be false because 4 is equal to, not less than, the size of the array and the loop will then be skipped. The program will continue after the loop. If you used &lt;=, the computer would try to find something at position 4 and you'd have another problem due to JavaScript returning "undefined."</p>
<p>Now all that's left is to return <span class="variables">sum</span>, the total value of all cards. After the closing brace of the while loop, write
<div class="code">return sum;</div>
<p>Press submit, and observe how the computer makes a different decision when you have more cards!</p>
<p>If your code is not working properly, make sure your <span class="variables">totalValue()</span> function looks like <a show="hidden-1">this</a>. This is not the entire program! For most of the rest of the tutorial, we will only be showing you the new parts of the code because the program is getting so long. We deleted comments since your comments don't need to be identical to ours, but you should keep yours.</p>
<div class="hiddencode" id="hidden-1">function totalValue(){
       var length = handValue.length;
       var counter = 0;
       var sum = 0;
       while(counter &lt; length) {
               sum = sum + handValue[counter];
               counter = counter + 1;
       }
       return sum;
}
</div>