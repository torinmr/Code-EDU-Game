<style>
.code, .hiddencode{
background-color:#CCC;
white-space:pre;
font-family:"Courier New", Courier, monospace;
}

.variables{
font-family:"Courier New", Courier, monospace;
}
</style>

<h2>Contents</h2>
<li><a href="#welcome"> Welcome! </a></li>
<li><a href="#lesson1"> Mission 1: Name Yourself — Variables and Strings </a></li>
<li><a href="#lesson2"> Mission 2: Hit — Functions </a></li>
<li><a href="#lesson3.1"> Mission 3.1: Hit or Stand — Conditional Statements </a></li>
<li><a href="#lesson3.2"> Mission 3.2: Hit or Stand — Booleans </a></li>
<li><a href="#lesson3.3"> Mission 3.3: Hit or Stand — Using Boolean Expressions </a></li>
<li><a href="#lesson4.1"> Mission 4.1: Better Strategy — Introducing Functions </a></li>
<li><a href="#lesson4.2"> Mission 4.2: Better Strategy — Writing Functions </a></li>
<li><a href="#lesson4.3"> Mission 4.3: Better Strategy — Introduction to Arrays </a></li>
<li><a href="#lesson5"> Mission 5: Organize Your Code — Comments on Commenting </a></li>
<li><a href="#lesson6.1"> Mission 6.1: Total Value With More than Two Cards — Loop Setup </a></li>
<li><a href="#lesson6.2"> Mission 6.2: Total Value With More than Two Cards — Make the Loop Loop </a></li>
<li><a href="#lesson7.1"> Mission 7.1: Cleaning Up Your Code--Incrementation Shortcuts </a></li>
<li><a href="#lesson7.2"> Mission 7.2: Cleaning Up Your Code--For Loops </a></li>
<li><a href="#lesson8.1"> Mission 8.1: Betting--Nested Conditionals and More Functions with Parameters </a></li>
<li><a href="#lesson8.2"> Mission 8.2: Betting--Do it Yourself: Functions with Parameters </a></li>
<li><a href="#lesson9.1"> Mission 9.1: Double Down — Multiple If Statements in a Row </a></li>
<li><a href="#lesson9.2"> Mission 9.2: Double Down--Elseif </a></li>
<li><a href="#lesson9.3"> Mission 9.3: Double Down--And and Or </a></li>
<li><a href="#lesson10.1"> Mission 10.1: Hit or Stand Based on the Dealer's Hand — More Practice with If Statements and Boolean Expressions </a></li>
<li><a href="#lesson10.2"> Mission 10.2: Hit or Stand Based on the Dealer's Hand — Even More Practice with If Statements and Boolean Expressions </a></li>

<p>--------------------------------------------------------------------------</p>

<a name="welcome"></a>
<h3>Welcome!</h3>
<p>
    Hello, and welcome to JavaJack's Casino! We hear you want to learn to program, and to make vast sums of money doing it. Well, you've come to the right place! We're going to teach you how to write a program to ensure you make bank playing Blackjack. In the process, you'll learn the fundamentals of programming, as well as some intense Blackjack strategies. The tutorial may take a while, but you can log back in later to finish it. By the end, you'll have an awesome Blackjack program, complete with betting and even card counting! Use the buttons to the right to play a hand or two. Then click continue to learn how to program the computer to play for you!
</p>
<p>
    For those of you who don't know what Blackjack is, it's a card game in which every player tries to get a hand with a value of as close to, but no more than, 21 as possible. Face cards are worth 10 points, the Ace can be 1 or 11, and every other card is worth its face value. You play against a dealer. You and the dealer will each be dealt two cards at the beginning of the game. You will be able to see one of the dealer's. You will then have the option to "hit" (get another card) as many times as you'd like. Once you don't want any more cards, you "stand." Be careful! If the value of your cards exceeds 21, you "bust," that is, you lose! Once you stand, the dealer will draw cards. The dealer must hit if the total value of his/her cards is less than 17, and must stand if it is 17 or greater. When determining this, an Ace is counted as an 11. If the dealer busts and you don't, you win. If no one busts, whoever has a higher hand wins. A few more important things: If either player is initially dealt 21, that's a "Blackjack" and that player wins. If the players tie, the dealer wins (unless both players have Blackjack. Then it's just a tie.) If you get 5 cards without busting, you win. There are some more rules, including betting, but we'll get into those later. If you want more information, click <a href="http://www.blackjackinfo.com/blackjack-rules.php" target="_blank">here</a>.
</p>

<p>--------------------------------------------------------------------------</p>

<a name="lesson1"></a>

<h3>Mission 1: Name Yourself &mdash; Variables and Strings</h3>
<p>
    During the course of this tutorial, it is important to remember you are not programming the entire game. You're programming what you want to do when it is your turn in the game. We've written some code to tell the dealer how to respond when you tell it you want to hit or stand. It is also potentially useful to know that you will be programming in a language called JavaScript. There are many different programming languages, but the concepts underlying each are the same. Once you understand how to program in one language, it is easy to learn another!
</p>
<p>
    We don't want this tutorial to feel impersonal, so the first step is for you to name yourself. Your name needs to be stored in a <em>variable</em> so the computer can use it in the game and tutorial. A variable is simply something that stores a <em>value</em>, or piece of information. What you need to do is make a variable called <span class="variable">name</span> and set its value to your name. To do this, type
    <div class="code">var name = "yourname";</div>
    in the box below the cards.
</p>
<p>
    There are a few important things to note here. First, "name" is the name of the variable. The var in front of <span class="variable">name</span> tells the computer that <span class="variable">name</span> is a variable. Your name, like any other series of letters, is called a <em>string</em> and must be enclosed in quotes. The = assigns the value on the right ("yourname") to the variable on the left (name). The semicolon tells the computer that the line of code has been completed. That's it! Click submit and watch your name appear below your cards. (Since you didn't tell the computer you wanted to do anything regarding the gameplay, it didn't give you any more cards but still proceeded to play the game. Don't worry, that's the next step!
</p>

<p>--------------------------------------------------------------------------</p>

<a name="lesson2"></a>

<h3>Mission 2: Hit &mdash; Functions</h3>
<p>
    Hello there, [NAME]! Nice to meet you. Good work on the first mission. Now it's time to learn how to program the computer to play the game!
</p>
<p>
    A <em>function</em>, also known as a <em>method</em>, is a short line of code that makes the computer do stuff. You'll learn how to write a function later, but for now, try one we wrote that hits. (Remember, hitting is asking the dealer for a card, not attacking him or her.) To do that, on the line below the one where you set your name, type
</p>
<div class="code">hit();</div>
<p>
    "hit" is the name of the function. Every function name is always followed by open and closed parentheses (). And notice that the semicolon is once again present to end the line. Hit submit, and the dealer will deal you cards until you bust! Every time the dealer asks your program what it wants to do, it says hit. That's not a very good Blackjack strategy, but that's ok. You know how to make the computer do things, and, as the tutorial goes on, your program will get better and better at winning. One final thing to notice here: No matter how many blank lines you put between your naming command and your hitting command, the computer will still do the same thing. Try it!
</p>
<p>
    If your code is not working or your name is no longer displaying correctly, make sure your code looks like <a show="hidden-1">this</a>. (Even if it seems like your code is working, it's always a good idea to check our solution just in case you have a small error.)
</p>
<div class="hiddencode" id="hidden-1">var name = "David";
hit();
</div>

<p>--------------------------------------------------------------------------</p>

<a name="lesson3.1"></a>
<h3>Mission 3.1: Hit or Stand &mdash; Conditional Statements</h3>
<p>Alrighty, [NAME]! You are now successfully playing Blackjack. You'll bust every time, but that's what we're about to fix. We're going to get into some serious stuff here, so this mission will be divided into multiple parts.</p>
<p>In Blackjack you obviously don't want to hit every time because you'll end up busting. What you want to do is hit under some circumstances and stand under others. Fortunately, programming languages have a simple way to do these kinds of conditional actions with if-else statements. Esentially you tell the computer if something is true, do A, otherwise do B. In JavaScript, the syntax for this statement is</p>
<div class="code">if (somethingtrue) {
       A;
}
else {
       B;
}
</div>
<p>
Else is JavaScript's word for "otherwise." Delete <span class="variable">hit();</span> and type the above statement into the box on the right below your name-setting command. We'll fill it in soon. Notice that there are semicolons after the commands A and B but not after <span class="variable">if()</span> and <span class="variable">else</span>. The braces <span class="variable">{ }</span> following <span class="variable">if()</span> and else surround the command (A or B) that is performed in each case. Just like it doesn't matter how many blank lines are between two commands, the indentations don't matter either. They just make it easier to read, which is especially important if you are working with other people.</p>
<p>Now we need to replace somethingtrue, A, and B with commands the computer can read. A and B are easy. We want to hit if something is true and stand if it's not, so replace A with <span class="variable">hit();</span> and B with <span class="variable">stand();</span>.<span class="variable"> stand()</span> is another function we wrote for you. Your code should now look like</p>
<div class="code">if (somethingtrue) {
       hit();
}
else {
       stand();
}
</div>
<p>
Press submit to check your work. (The game will return an "undefined" error because it doesn't know what somethingtrue means, but we'll fix that next.)</p>

<p>--------------------------------------------------------------------------</p>

<a name="lesson3.2"></a>
<h3>Mission 3.2: Hit or Stand &mdash; Booleans</h3>
<p>
    Excellent! Now we just need to replace somethingtrue with something that you want to be true before you hit. First, you need to understand <em>booleans</em>. A boolean is a type of variable that is either true or false. (Why do they have such a strange name? Because some guy called George Boole wanted to become famous.) For now, replace "somethingtrue" with "true".  Don't delete the parentheses! Press submit. Now your program will always hit because the statement following the if is always true, literally! (Notice that somethingtrue is just gibberish to the computer, but it knows what true means.)
</p>
<p>
    Now it's time to use a <em>boolean expression</em>, or comparison. A boolean expression <em>returns</em> true or false based on whether the comparison being made is true or false. "Return" simply means "give the computer a value based on evaluated code." There are a few comparisons you can make between variables and numbers:
    <ul>
        <li>
            === checks to see if the thing on the left equals the thing on the right and returns true if it is and false if it isn't. (Remember, there is a difference between === and =. = is used to asign a value to a variable. It is never used for comparisons. This is a common mistake, so do your best to avoid it!)
        </li>
        <li>
            &lt; checks to see if the thing on the left is less than the thing on the right and returns true if it is and false if it isn't.
        </li>
        <li>
            &gt; checks to see if the thing on the left is greater than the thing on the right.
        </li>
        <li>
            &lt;= checks to see if the thing on the left is less than or equal to the thing on the right.
        </li>
        <li>
            &gt;= checks to see if the thing on the left is greater than or equal to the thing on the right.
        </li>
    </ul>
</p>
<p>
    Try replacing true with
    <div class="code">3 === 3</div>
    and press submit. Since 3 does in fact equal 3, the computer will hit! Now, replace one of the 3's with a 4 and press submit. Your player should now stand every time because 3 does not equal 4; that is, the expression returns false and so the computer skips over the if statement and straight to the else statement. Try experimenting with comparing numbers using &lt;= and other operators.
</p>
<p>
    You can also compare the values of variables. Try replacing the expression inside the parentheses after if with
    <div class="code">name === "yourname"</div>
    The program will evaluate this as true and hit every turn! This is because you set <span class="variable">name</span> to hold "yourname." Instead of comparing a number to a number, you are comparing a variable to a string. Replace "yourname" with a different string, and it will evaluate as false and the program will stand. Try it!
</p>
<p>
    There's one other cool thing you can do with boolean expressions. What if you wanted to see if something is not equal to something else? An ! means "not" in boolean expressions. So, !== checks to see if the thing on the left is NOT equal to the thing on the right and returns true if it is unequal and false if it is equal. Try replacing the === in the statement comparing <span class="variable">name</span> to a string that isn't your name with !==. The computer will now evaluate this statement as true and will once again hit every turn.
</p>

<p>--------------------------------------------------------------------------</p>

<a name="lesson3.3"></a>

<h3>Mission 3.3: Hit or Stand &mdash; Using Boolean Expressions</h3>
<p>Alright, so this is all fine and dandy, but how does it help with Blackjack? Let's start with something simple. We wrote a function for you called <span class="variable">secondDealtCardVal()</span>. This function does something you haven't seen before: It returns a value just like a boolean expression does. Recall that <span class="variable">hit()</span> and <span class="variable">stand()</span> simply make stuff happen but don't give any information. A function that returns a value can be treated like any other value. That means it can be set to a variable to store the value returned by the function, similar to how you set "yourname" to name. For example, if you had a function called <span class="variable">findYourName()</span> that returned a string containing your name, you could rewrite the first line as</p>
<div class="code">var name = findYourName();</div>
<p>
This line would do the same thing. The findYourName function doesn't exist because that would require the computer to read your mind, so don't try this one!</p>
<p>Anyway, <span class="variable">secondDealtCardVal()</span> returns the value of the second card you were dealt. For instance, if the second card you got was a Jack, it would return 10. If it was a 4, it would return 4. A very simple conditional statement for this hit or stand task would be "if the second card dealt to me is less than 7, hit, otherwise, stand." This will increase your winning percentage because if one of your cards is a low number, you are less likely to bust so you can afford to hit. (Of course, this is a very imperfect strategy but we'll improve it later.) So, we need to put a statement that checks to see how the value of the second card dealt compares to 7 inside the parentheses of the if statement. Remember how we said you can assign  <span class="variable">secondDealtCardVal()</span> to a variable? Well you can also compare it to a variable or number with the same boolean expressions described above!</p>
<p>We said we were going to check to see if the value of the last card dealt was less than 7, so make the if statement read</p>
<div class="code">if(secondDealtCardVal() &lt; 7)</div>
<p>Now, hit submit and play the game a few times. Observe how your program tells the dealer it wants to hit if your second card is a 2, 3, 4, 5, or 6 and otherwise stands! (We're counting the ace as an 11 in <span class="variable">secondDealtCardVal()</span> and you will continue to do so in the following code we will have you write. The game engine will still count an Ace as 1 or 11, but this is more difficult to deal with, so we won't have you worry about that yet. As a result, your code won't be perfectly evaluating the game, but towards the end of the tutorial we'll have you fix the problem.)</p>
<p>Notice that, given the 6 comparisons from mission 3.2 (===, &lt;, &gt;, &lt;=, &gt;=, !==), there are more ways than one to write the conditional statement inside the parentheses following if. For example, you could say that <span class="variable">secondDealtCardVal()</span> should be less than or equal to 6, which is the same thing as saying less than 7 since the values are whole numbers. You could also say 7 is greater than <span class="variable">secondDealtCardVal()</span>. What else could you say? Try it out! You can also try numbers other than 6 and see if you win more often!</p>
<p>Before going to the next step, let's talk a little bit about the order the computer does things. The computer starts reading your code at the top and moves down line by line. So, the first thing that happens is you tell the computer your name. Then you tell it to check if it should hit, and finally to stand, if you don't hit. If you change the order of the code, the computer will process things in a different order. For example, if you put the name declaration at the end, it will assign the name after you take a card. The computer is so fast, this probably will be hardly noticeable! You'll see a case when the order is crucial later.</p>
<p>If your code is not working properly, make sure it looks like <a show="hidden-1">this</a>.</p>
<div class="hiddencode" id="hidden-1">var name = "David";

if (secondDealtCardVal() &lt; 7) {
       hit();
}
else {
       stand();
}</div>

<p>--------------------------------------------------------------------------</p>

<a name="lesson4.1"></a>

<h3>Mission 4.1: Better Strategy &mdash; Introducing Functions</h3>
<p>Whew! That was a long mission. But you did it, and now you're really starting to understand how to use the computer's power of logic. The strategy we just designed is, of course, not a very good one. The value of the last card you were dealt really has very little bearing on whether you should hit because the first card you were dealt could be anything! Let's fix that problem.</p>
<p>The program would work a lot better if it hit every time the TOTAL value of ALL your cards was less than, say, 17, and stand otherwise. (Notice that these are the rules the dealer is playing by. Playing by these rules will improve your chances of winning, but the dealer still has a higher chance because the dealer wins in the event of a tie.)</p>
<p>This is a bit tricky. Instead of checking the value of the last dealt card, we need to check the value of both cards. So, <span class="variable">secondDealtCardVal()</span> needs to be replaced by a function that returns the total value of the two cards. Let's call that function <span class="variable">totalValue()</span>. Replace <span class="variable">secondDealtCardVal()</span> with <span class="variable">totalValue()</span>.</p>
<p>The second part is easy. The total value needs to be less than 17, so we just replace 7 with 17! That line should now read<br />
<div class="code">if (totalValue() &lt; 17) {</div></p>
<p>Press submit. What happens? The game tells you there is an error because a function is undefined. The problem is that <span class="variable">totalValue()</span> doesn't exist! <span class="variable">secondDealtCardVal()</span> exists because we wrote it for you, but we didn't write <span class="variable">totalValue().</span> That's your job!</p>

<p>--------------------------------------------------------------------------</p>

<a name="lesson4.2"></a>
 
<h3>Mission 4.2: Better Strategy &mdash; Writing Functions</h3>
<p>A function is a command that represents a block of code. You've been using some we wrote for you, namely <span class="variable">hit()</span> and <span class="variable">stand()</span>. Every time the command is given, the computer finds where the function is written, does what it says, and then returns to the rest of the code. To start writing a function, go to the end of your code, after the last brace of the else statement, and type
<div class="code">function totalValue(){

}</div><br />
"function" is included at the beginning of your code to tell the computer this is a function. When it sees this, it knows to use this code when the function is called. The braces { } after totalValue() will contain the code that the function executes.</p>
<p>Let's take a quick break here to discuss naming rules and conventions. First, no two variables or functions can have the same name! When you name a variable or function in JavaScript, you can use letters, numbers, and underscores, but cannot start with a number. Names of two or more words are usually either written with the first word lowercase and all other words capitalized (totalValue) or every word lowercase and separated with an underscore (total_value). You can use either name for totalValue(), but you MUST use the same name every time! That is, if you write <br />
<div class="code">function total_value(){

}</div><br />
here you must write <br />
<div class="code">if(total_value() &lt; 17){</div><br />
above.</p>
<p>Anyway, now we're going to make this function do something. Remember, this function needs to return a value. Between the braces of the function, type<br />
<div class="code">return 3;</div><br />
and run the program. totalValue() now always returns 3. Because 3 is less than 17, the computer will always hit.</p>
<p>You can make the computer evaluate mathematical expressions, too. Replace "3" with "3 + 18" and run the program. Now <span class="variable">totalValue()</span> returns the sum of 3 and 18 (21) so the program will call stand(). In most programming languages, there are 5 mathematical operators available: + is used for addition, - is used for subtraction, * for multiplication, / for division, and % for modulus. Modulus divides the two numbers and returns the remainder.</p>

<p>--------------------------------------------------------------------------</p>

<a name="lesson4.3"></a>

<h3>Mission 4.3: Better Strategy &mdash; Introduction to Arrays</h3>
<p>
    Ok. We know how to add numbers, but now we need to figure out what the numbers are. Before, you used <span class="variable">secondDealtCardVal()</span> to find the value of one card. Unfortunately for you, there's no <span class="variable">firstDealtCardVal()</span> function, so you need to understand how the cards in your hand are stored. The values of the cards are stored in an array called handValue. An <em>array</em> is a numbered list of data. To access something in this array, one types
    <br />
    <div class="code">
        handValue[position]
    </div>
    where position is replaced by a number or numerical variable representing the spot in the list you want information from. There is one confusing thing here: JavaScript, like most programming languages, starts numbering arrays at 0. So, the first spot in the array is 0, the second is 1, and so on. (This is another common mistake. Don't forget!) This means that <span class="variable">handValue[0]</span> will return the value stored at the first position in the handValue array, that is, the value of the first card in your hand. Likewise, <span class="variable">handValue[1]</span> returns the value of the second card. (That's all that secondDealtCardVal() is doing! So, there will be no need to use that function anymore.)
</p>
<p>
    As you may have guessed, you can add these values together just as you would regular numbers. So, replace
    <br />
    <div class="code">
        return 3 + 18;
    </div>
    <br />
    with
    <br />
    <div class="code">
        return handValue[0] + handValue[1];
    </div>
    <br />
<p>
    This will add the values of your two cards and return them to the boolean expression in the if statement, where it will compare the sum to 17! Click submit, and observe how the computer only hits when the value of both cards is less than 17. Huzzah! (Yes, we know its still not a great strategy and your code ignores any other cards you are dealt, but wait till mission 6!)
</p>
<p>
    An important note: Just like with other variables, arrays must have var in front of them if you are <em>creating</em> them. After you create any type of variable, you no longer need to refer to it with var.
</p>
<p>
    If your code is not working properly, make sure it looks like <a show="hidden-1">this</a>.
</p>
<div class="hiddencode" id="hidden-1">
    var name = "David";

    function totalValue() {
    return handValue[0] + handValue[1];
    }

    if(totalValue() < 17){
    hit();
    }
    else{
    stand();
    }
</div>

<p>--------------------------------------------------------------------------</p>

<a name="lesson5"></a>

<h3>Mission 5: Organize Your Code &mdash; Comments on Commenting</h3>
<p>Well, it looks like you're well on your way to becoming a professional Blackjack programmer, [NAME]! But your code is getting a bit complicated. It's very important to remember what each part of your code does in case you need to edit it later. Fortunately, you can <em>comment</em> it. Comments are notes in your code that the computer ignores. You can type anything you want in comments without worrying about the computer doing something weird.</p>
<p>Commenting is extremely important when you are working in groups; no one wants to trawl through code just to understand what a function does. As not commenting may incite the wrath of angry programmers, you'll always want to do it.</p>
<p>There are two types of comment notation in JavaScript. The first is a single line comment. It is written like this<br />
<div class="code">//type your comment here</div><br />
Anything on the line after the two slashes will be skipped over by the computer. This can be used for adding notes or for "commenting out" lines of code that you want the computer to skip.</p>
<p>You can also put a comment on a line after a piece of code. For example,<br />
<div class="code">function totalValue(){ //type your comment here</div><br />
The computer will still see the function declaration because it is before the // but will not see the comment. This is very useful for adding notes about what a line does.</p>
<p>The other type of comment is a multiline comment. It begins with /* and ends with */ For example,<br />
<div class="code">/* part 1 of comment
part two of comment
part three of comment */</div><br />
The computer will skip over all three of those lines!</p>
<p>Add some comments to your code to remind yourself what's happening at each step, and then hit submit. Nothing different should happen!</p>
<p>To see some commenting suggestions, click <a show="hidden-1">here</a>.</p>
<div class="hiddencode" id="hidden-1">var name = "David"; //tell computer your name

/*
Function to find total value of both cards
Returns an integer that is the total value of both cards
*/
function totalValue(){
       return handValue[0] + handValue[1];
}

if(totalValue() &lt; 17){ //if the total value of both your cards is less than 17
       hit();
}
else{
       stand();
}</div>

<p>--------------------------------------------------------------------------</p>

<a name="lesson6.1"></a>

<h3>Mission 6.1: Total Value With More than Two Cards &mdash; Loop Setup</h3>
<p>
    If you've played the game a few times, you may have noticed that your program does a decent job determining if it should hit or stand the first time, but then keeps making the same decision every time until you bust! That's no good! The problem is that no matter how many card you have, <span class="variables">totalValue()</span> is only summing the value of the first two.
</p>
<p>
    An obvious solution is to change the return line in <span class="variables">totalValue(){</span> to
</p>
<div class="code">return handValue[0] + handValue[1] + handValue[2];</div>
<p>
    but there are two problems with this. Make this change, click submit, and you'll see the first one. When you have only two cards, <span class="variables">handValue[2]</span> (which would check the third card) doesn't exist and so JavaScript returns "undefined". For some stupid reason, it doesn't warn you of this, but you'll see that the program stands every time as a result. Even if it didn't make this error, it would only add the first three cards you get; not very helpful when you have four cards in your hand.
</p>
<p>
    We can fix both these problems with loops. There are two kinds of loops. The first and most basic kind is a while loop. It's syntax looks like
</p>
<div class="code">while(somethingtrue){

}</div>
<p>
    This should remind you of an if statement. When the computer reaches this while loop, it will do whatever is inside the braces { } over and over as long as the argument inside the parentheses ( ) remains true. Once the argument is false, the computer will skip the loop and continue reading the code after the loop. But be careful! If the argument in the parentheses is always, the loop will never end, and the game and possibly even your entire web browser will crash. That would really be a downer. But don't worry too much: We automatically save your progress, so you won't have to start over from mission 1 if that happens.
</p>
<p>
    Delete the return statement in the <span class="variables">totalValue()</span> function and replace it with the basic while loop structure. What we are going to do is declare a variable that holds the length of the hand. We will declare another that is a counter which will count how many times we've gone through the loop, and one more that will hold the sum of the values of the cards in your hand. This last variable is the important one: It will be returned by the function. To declare these variables, write, immediately before the while loop,
</p>
<div class="code">var length = handValue[].length; //set length to the size of the hand
var counter = 0; //counter variable, starts at 0
var sum = 0; //sum of card values, to be returned</div>
<p>
    The comments don't need to be written, of course, but will be helpful for you. Remember, you can name the variables whatever you want as long as your consistent. Take another look at the first line you just wrote. <span class="variables">length</span> is a variable defined by JavaScript that holds the length of the array. Writing <span class="variables">arrayName.length</span> returns the length of the array. Finally, note that every time this function is called, it will reset <span class="variables">length</span> to the current length of this array. That is important, because the size of your hand can change every turn.
</p>
<p>
    Press continue to go on to the next page, but DON'T PRESS SUBMIT or your program will crash.
</p>

<p>--------------------------------------------------------------------------</p>

<a name="lesson6.2"></a>

<h3>Mission 6.2: Total Value With More than Two Cards &mdash; Make the Loop Loop</h3>
<p>Every time we run through the loop, we need to add the value of the current spot in the array to the variable <span class="variables">sum</span> and then increment the counter by one to keep track of our place in the array. Inside the braces { } of the while loop, write
<div class="code">sum = sum + handValue[counter];
counter = counter + 1;</div>
<p>Don't get scared by all the variables, its simpler than you think. Notice var appears nowhere in this line: You only use it when creating a variable. The first line sets <span class="variables">sum</span> to itself (initially zero) plus the value of the card at position counter. This may seem a little strange, but recall that counter is just a variable representing a number. It starts at 0, so this line is initially just like saying</p> 
<div class="code">sum = sum + handValue[0];</div>
<p>The second line sets <span class="variables">counter</span> to itself plus one, so the second time it runs through the loop the first line will get the value at position 1, the third time will get the value at positon 2, and so on. Remember when we promised you'd see a case where the order of commands was crucial? This is one. It is important that the adjustment of <span class="variables">counter</span> occurs after that of <span class="variables">sum</span> or else the first spot would be skipped.</p>
<p>Now we just need to replace somethingtrue with a boolean expression telling the computer to run through the loop until it has gone through the whole hand. Since <span class="variables">counter</span> is counting the position in the hand, we can compare this value to <span class="variables">length</span>, the variable that represents the size of the hand. Inside the parentheses following while, write</p>
<div class="code">counter &lt; length</div>
<p>Some tricky stuff: Why did we use &lt; instead of &lt;=? Remember that <span class="variables">counter</span>, like the positions in an array, starts at 0. However, when <span class="variables">.length</span> "counts" and returns the size of an array, it starts at 1. So, if you have an array with 4 items in it, the last position is 3 and <span class="variables">.length</span> will return 4. 3 is the last number that is less than 4, so position 3 is the last position that will be added to <span class="variables">sum</span>. Once <span class="variables">counter</span> is incremented to 4, the statement in the while loop will be false because 4 is equal to, not less than, the size of the array and the loop will then be skipped. The program will continue after the loop. If you used &lt;=, the computer would try to find something at position 4 and you'd have another problem due to JavaScript returning "undefined."</p>
<p>Now all that's left is to return <span class="variables">sum</span>, the total value of all cards. After the closing brace of the while loop, write
<div class="code">return sum;</div>
<p>Press submit, and observe how the computer makes a different decision when you have more cards!</p>
<p>If your code is not working properly, make sure your <span class="variables">totalValue()</span> function looks like <a show="hidden-1">this</a>. This is not the entire program! For most of the rest of the tutorial, we will only be showing you the new parts of the code because the program is getting so long. We deleted comments since your comments don't need to be identical to ours, but you should keep yours.</p>
<div class="hiddencode" id="hidden-1">function totalValue(){
       var length = handValue.length;
       var counter = 0;
       var sum = 0;
       while(counter &lt; length) {
               sum = sum + handValue[counter];
               counter = counter + 1;
       }
       return sum;
}
</div>

<p>--------------------------------------------------------------------------</p>

<a name="lesson7.1"></a>

<h3>Mission 7.1: Cleaning Up Your Code--Incrementation Shortcuts</h3>
<p>Programmers are lazy. We don't like to type more than we have to if at all possible. As a result, programming languages have many shortcuts. Since you're going to be a programmer, you should learn to be lazy too.</p>
<p>Our <span class="variables">totalValue()</span> function could benefit from a few of these shortcuts. First, we'll take a look at the section<br />
<div class="code">sum = sum + handValue[counter];
counter = counter + 1;</div><br />
Just look at all that unnecessary repetition! <span class="variables">sum = sum</span>? Clearly typing that's a waste of effort. Fortunately, we can modify both of those statements using the operator +=. Using this operator, the first line now reads<br />
<div class="code">sum += handValue[counter];</div><br />
This line does exactly the same thing as the line it replaces! Pretty awesome. Change the second line yourself following this example and then press submit. The program will work in exactly the same way. The same thing can be done with the other 4 operators: -=, *=, /=, and %=.</p>
<p>Think that's enough simplification? Wrong. Programmers are even lazier than that. Take a look at the second line, and imagine how often you would have to write<br />
<div class="code">+= 1</div><br />
if you were to keep making loops with counters. Too much work! Try replacing the second line with<br />
<div class="code">counter++;</div><br />
and press submit. The code does the same thing. This shortcut only exists for incrementing by 1. If you want to increment by any other number, you have to write it out. There is, however, also a shortcut for<br />
<div class="code">variable -= 1;</div><br />
It is<br />
<div class="code">variable--;</div></p>
<p>That's as lazy as we're going to get with incrementing, but don't fear! There are more shortcuts to know.</p>

<p>--------------------------------------------------------------------------</p>

<a name="lesson7.2"></a>

<h3>Mission 7.2: Cleaning Up Your Code--For Loops</h3>
<p>Take a look at your while loop. Wouldn't it be better with fewer lines of code? Yes, it would. There is a special kind of while loop for use with counters called a for loop. A for loop basically combines all of the manipulations of the while loop and counter variable into one line. The following function is exactly the same as the one you are using with a while loop
</p>
<div class="code">function totalValue(){
    var length = handValue.length;
    var sum = 0;
    var counter = 0;
    for(counter = 0; counter &lt; length; counter++){
        sum += handValue[counter];
    }
    return sum;
}</div>
<p>
Much prettier! All that happened is "while" was changed to "for" and the incrementation of the counter was moved into the parentheses. So, the basic for loop structure is
</p>
<div class="code">for(initialize counter; counter boundary (boolean expression); counter incrementation){

}</div>
<p>
The counter should still be declared before the for loop. Note each command in the parentheses is separated by semicolons, but there is no semicolon after the last command. You can think of this as three separate lines of code with the parentheses. Press submit, and notice the program does exactly the same thing with the for loop as it did with the while loop. There are instances when you should use a while loop and not a for loop, but we won't go into them in this tutorial. Also note that a poorly set boundary condition in a for loop will cause an infinite loop and crash your program just like it does in a while loop.</p>

<p>
    Alright, we're satisfied. Enough laziness for now! (It's not all about laziness though...In general, having fewer lines of code is easier to read!)
</p>

<p>--------------------------------------------------------------------------</p>

<a name="lesson8.1"></a>

<h3>Mission 8.1: Betting--Nested Conditionals and More Functions with Parameters</h3>
<p>
    Now that your code has been modified to reflect the lazy programmer you're becoming, it's time to get back to the game. As you may have realized, Blackjack is a little boring if there's nothing on the line. So, we're going to introduce betting.
</p>
<p>
    For those of you who don't know, you bet at the very beginning of a hand, before you are dealt cards. If you lose the hand, the dealer takes your money. If you win, you get your money back and the dealer pays you as much as you bet. If you win with a Blackjack, the dealer pays you 150% of what you bet.
</p>
<p>
    We've written a bet function for you, called <span class="variables">bet()</span>. Clearly, <span class="variables">bet()</span> needs to know how much you want to bet. So, we need some way to give it information. We will do this by <em>passing a parameter</em>. A parameter is data passed, or given, to a function and is written inside a function's parentheses. (Now you know what those are for!) <span class="variables">bet()</span> requires a parameter that is a number that represents how much you want to bet. So, if you want to bet $4, you would write
</p>
    <div class="code">bet(4);</div>
<p>
    Easy, right? The problem is you can only bet at the beginning of the hand, so we need some way of telling the program that. Sounds like a job for if statements! Basically, you need to say, if it's the beginning of hand, bet a certain amount. If it's not the beginning of the hand, determine whether you should hit or stand. Try this on your own! The following information and hints will be helpful:
</p>
<ul>
    <li>
        We have made a boolean called <span class="variables">handStart</span> that is true if it is the start of the hand and false if it is not.
    </li>
    <li>
        You only need to add an if statement, an else statement, and a <span class="variables">bet()</span> call.
    </li>
    <li>
        You do not need to delete any of your current code!
    </li>
    <li>
        Make sure you have opening { and closing } braces for all of your if and else statements.
    </li>
    <li>
        If and else statements can be inside other if and else statements. When this is done, the braces pair themselves from the inside out. Take a look at this code:
        <div class="code">if (true) {
    if (true) {
        
    }
}
</div>
        Obviously this will do nothing, but it is important to see how the braces pair. The opening brace on line 2 is closed by the closing brace on line 3. The opening brace on line 1 is closed by the closing brace on line 4. This means that the second if statement is completely inside the first one and therefore will only be reached if the first one is true.
    </li>
</ul>
<p>
    See what you can figure out, and don't be frustrated if you can't get it! This is hard stuff. When you get it to work, press submit a few times to see if your program makes or loses money. (From now on you will get an error if your program does not bet money. If you run out of money, press the "reset money" button.)
</p>
<p>
    If your code is not working properly, make sure it looks like <a show="hidden-1">this</a>. Notice your name variable and function definitions are still all alone at the top and bottom of the code, respectively. In this new code, an if statement checking to see if it's the beginning of the hand was added as the second thing the computer reads. If it is the beginning of the hand, the program will bet. An else statement now completely surrounds the original if-else statements. Notice the arrangement of braces. The brace immediately after else is closed by the last brace before the part where you made <span class="variables">totalValue()</span>. This means that if it is not the beginning of the hand, the computer will then check to see if it should hit or stand and will not bet, just as it did originally.
</p>
<div class="hiddencode" id="hidden-1">var name = "David";

if (handStart) {
    bet(4); //this will bet $4
}
else { //This brace opens the else statement
    if (totalValue() &lt; 17) {
        hit();
    }
    else {
        stand();
    }
} //This braces closes the else statement

function totalValue(){
    var length = handValue.length;
    var sum = 0;
    var counter;
    for(counter = 0; counter &lt; length; counter++){
        sum += handValue[counter];
    }
    return sum;
}</div>

<p>--------------------------------------------------------------------------</p>

<a name="lesson8.2"></a>


<h3>Mission 8.2: Betting--Do it Yourself: Functions with Parameters</h3>
<p>
    Dang, that was a real toughie! We took the training wheels off in that one, but you made it through, and now your game will be much more fun. However, take a moment and try to bet more money than you actually have. You will be left with a negative amount of money! A casino would never let you bet more money than you actually have, so we need to modify your program so it doesn't bet more money than you have. (Reset your money before continuing.)
</p>
<p>
    This is going to require writing an improved bet function. We'll call it <span class="variables">safeBet()</span>. (Remember, you can call your function anything you want as long as you're consistent.) This function is going to be a bit different than the last function you wrote, <span class="variables">totalValue()</span>, in two ways. First, <span class="variables">totalValue()</span> returned something: the value of your cards. <span class="variables">safeBet()</span> is going to be a replacement for<span class="variables"> bet()</span>, so it needs to bet but not return anything.
</p>
<p>
    The second difference is that <span class="variables">totalValue()</span> does not require any parameters--nothing needs to go between its parentheses. However, <span class="variables">bet()</span> takes a parameter: the amount of money you want to bet. Therefore, <span class="variables">safeBet()</span> needs to take this parameter as well. We'll actually give <span class="variables">safeBet()</span> two parameters: one will be the amount you want to bet, the other will set the limit you don't want your total amount of money to fall below. To avoid having a negative amount of money, you can set the limit to 0. However if you need some money left over to buy dinner after your trip to the casino, you can set the limit to 10. We'll call these two parameters <span class="variables">betAmount</span> and <span class="variables">limit</span>, respectively.
</p>
<p>
    The syntax for defining a function with a parameter is the same as that of defining any other function, except the variables you want as parameters should be written inside the parentheses, separated by commas. So, the <span class="variables">betSafe()</span> declaration should look like
</p>
<div class="code">function safeBet(betAmount, limit){

}</div>
<p>
    Write this at the bottom of your code, either before or after the <span class="variables">totalValue()</span> declaration.
</p>
<p>
    Now, replace the <span class="variables">bet()</span> command you wrote in mission 8.1 with <span class="variables">safeBet()</span>. When you include parameters in a function, you must pass these parameters when calling it; otherwise it won't work. To bet $4 and ensure that you will not have a negative amount of money, write
</p>
<div class="code">safeBet(4, 0);</div>
<p>
    This notation assigns 4 to <span class="variables">betAmount</span> and 0 to <span class="variables">limit</span>. Press submit. Your code should run, but will not bet anything. That's because we haven't told <span class="variables">safeBet()</span> to do anything yet. Let's start by just telling it to bet a certain amount and not worry about the limit yet. This will require using the <span class="variables">bet()</span> function inside the <span class="variables">safeBet()</span> function. Write <span class="variables">bet();</span> between the braces of the <span class="variables">safeBet()</span> declaration. We need <span class="variables">bet()</span> to bet the same amount that we told <span class="variables">safeBet()</span> to bet, so tell <span class="variables">bet()</span> to bet <span class="variables">betAmount</span>. Your function declaration should now look like
</p>
<div class="code">function safeBet(betAmount, limit){
    bet(betAmount);
}
</div>
<p>
    Press submit, and your program should now bet $4, just like it did with <span class="variables">bet()</span>. Let's take a look at what's happening. When you call <span class="variables">safeBet(4, 0)</span>, it sets <span class="variables">betAmount</span> to 4. <span class="variables">safeBet()</span> then uses <span class="variables">bet()</span> to bet <span class="variables">betAmount</span>, so the end result is that <span class="variables">safeBet()</span> bets 4! Currently, the second variable--the limit--does nothing, so let's now make <span class="variables">safeBet()</span> take it into account.
</p>
<p>
    We've created a function called <span class="variables">totalMoney()</span> that returns how much money you have. Basically, the <span class="variables">safeBet()</span> needs to adjust the value of <span class="variables">betAmount</span> if the total amount of money you have minus the amount you're betting is less than the limit you set. Add an if statement with this conditional statement before <span class="variables">bet()</span> call. Don't put anything between the braces of the if statement yet. There will be no else statement.
</p>
<p>
    Now we just need to fill in the braces. If the bet amount would drive you below the limit you set, you need to adjust <span class="variables">betAmount</span> so it no longer puts you below the limit. The simplest way to do this is to set bet amount equal to the total amount of your money minus the limit, like so
</p>
    <div class="code">betAmount = totalMoney() - limit;</div>
<p>
    Let's talk about the logic here. Betting <span class="variables">totalMoney() - limit</span> will mean that the amount of money you have after the function is called is <span class="variables">[totalMoney() - betAmount]</span> which equals <span class="variables">[totalMoney() - (totalMoney() - limit)]</span> which equals <span class="variables">[totalMoney() - totalMoney() + limit]</span> which equals <span class="variables">limit</span>.
    Since this command will be run if <span class="variables">betAmount</span> would reduce your total money to less than <span class="variables">limit</span>, this command will reset <span class="variables">betAmount</span> so it only reduces your total money to <span class="variables">limit</span>. Nice! Set your limit to 0, bet more money than you have, and press submit to test it out. You should be left with no money!
</p>
<p>
    If your code is not working properly, make sure it looks like <a show="hidden-1">this</a>.
</p>
<div class="hiddencode" id="hidden-1">var name = "David";

if (handStart) {
    safeBet(4, 0); //safeBet() has replaced bet()
}
else {
    if (totalValue() &lt; 17) {
        hit();
    }
    else {
        stand();
    }
}

function safeBet(betAmount, limit){
    /*The if statement we told you to write. Notice it
    is just a direct translation of the instructions.*/
    if(totalMoney() - betAmount &lt; limit){
        betAmount = totalMoney() - limit;
    }
    // Since there is no else statement here, this function will always bet. That's good!
    bet(betAmount);
}

function totalValue(){
    var length = handValue.length;
    var sum = 0;
    var counter;
    for(counter = 0; counter &lt; length; counter++){
        sum = sum + handValue[counter];
    }
    return sum;
}
</div>

<p>--------------------------------------------------------------------------</p>

<a name="lesson9.1"></a>


<h3>Mission 9.1: Double Down &mdash; Multiple If Statements in a Row</h3>
<p>With the addition of betting, we can also add a part of the game called doubling down. When you double down, you double your bet and then only get one more card. You can only double down immediately after being dealt to; That is, you cannot hit and then double down. This can be a good thing to do if you have 10 or 11 points in your hand at the beginning because you won't bust and there's a high probability you'll get a card worth 10 points and have a winning hand. We'll just double down when you have 10 points in your hand at first. (For the following missions, remember that we are still only counting an Ace as 11 in your program.)</p>
<p>We've written a function for you called <span class="variables">doubleDown()</span>. You will need to add another if statement checking to see if the value of your hand is 10 and if it is the program will need to double down. Let's think about where to put this if statement. It needs to be inside the first else statement along with the hit/stand if-else statements because it is another option for the computer to consider when planning its move. This also means it is not done at the beginning of the hand. It also needs to be checked before the computer checks to see if it should hit, for two reasons. First, after you hit you are no longer allowed to double down. Second, the range of total value that makes the program hit (range &lt; 17) includes the range that makes it double down (range === 10). Order is important in this case. The included range must be placed first; if it were placed second it would never be reached because range &lt; 17 would be true for a value of 10, causing you to hit when you want to double down. So, make an if statement that checks to see if the total value is 10 and, if so, doubles down and place it within the first else statement but above the if statement checking the total value. Press submit a few times, and when it does double down, you may get an error. We'll correct that on the next page.</p>

<p>--------------------------------------------------------------------------</p>

<a name="lesson9.2"></a>


<h3>Mission 9.2: Double Down--Elseif</h3>
<p>This error is because of the way the language reads if statements. JavaScript first checks the double down if statement, and if it is true it doubles down. However, it then also checks the hit if statement following it. If the card you were given on the double down is a low card, it will also try to hit because the total value of the cards will still be less than 17. (Notice that this contradicts what we said in the previous paragraph about the second statement possibly getting skipped. Once this problem is fixed, the previous paragraph will hold true.) Since you are not allowed to double down and then hit, especially not on the same turn, you get an error. Even if you don't get this error because the card you are given in the double down is large enough, your program is being inefficient by doubling down and then still checking if it should hit.</p>
<p>To fix this problem, we will use another piece of if-else statements called else if. As the name suggests, else if is similar to else but takes a conditional statement in parentheses just like if does. Replace the hit-checking if (the second if statement) with else if, but don't delete the parentheses or conditional statement inside them. Now, the computer will read as follows: If the total value is 10, double down. It then skips over the else if and else statements. However, if the total value is not 10, it checks to see if it's less than 17. If it is it hits and skips the final else statement. If it's not, it reads the else statement and stands. Click submit a few times and watch the program double down occasionally and not get errors. (Because it won't double down unless the total value is 10, it may take a while before you see this occur.)</p>
<p>If your code is not working properly, make sure it looks like <a href="">this</a>.</p>

<div class="hiddencode" id="hidden-1">
var name = "David";

if (handStart) {
       safeBet(4, 0); //this will bet 4
}
else {
       if(totalValue() === 10){
               doubleDown();
       }
       else if(totalValue() &lt; 17){
               hit();
       }
       else{
               stand();
       }
}

function safeBet(betAmount, limit){
       if(totalMoney() - betAmount &lt; limit){
               betAmount = totalMoney() - limit;
       }
       bet(betAmount);
}

function totalValue(){
       var length = handValue.length;
       var sum = 0;
       var counter;
       for(counter = 0; counter &lt; length; counter++){
               sum = sum + handValue[counter];
       }
       return sum;
}
</div>

<p>--------------------------------------------------------------------------</p>

<a name="lesson9.3"></a>

<h3>Mission 9.3: Double Down--And and Or</h3>
<p>So now you have a functional and reasonable way for the computer to double down. But the computer's strategy isn't ideal. Recall that we said you'll want to double down if the value of your cards is 10 or 11, not just 10. How do we do that? One way would be to add another else if statement after the if statement checking to see if the total value is 11. But that's a lot of writing, and programmers are lazy. So, we have a boolean "or" operator. It looks like this: || (The vertical line can be typed by pressing shift and \. \ is located above your return/enter key.)</p>
<p>So, we need to add an or statement to<br />
<div class="code">if(totalValue() === 10){</div><br />
so it reads<br />
<div class="code">if(totalValue() === 10 || totalValue() === 11){</div><br />
This just means that the code contained in the if statement will be run if the total value is 10 or 11. Try it!</p>
<p>The logic for when to double down is still imperfect. If the dealer has a high card showing, the chances of you beating the dealer on a double down are slim. So, we need to check to see if the value of the dealer's up card is less than 7 AND your total value is either a 10 or 11. Just like there is an "or" operator, there is an "and" or. It is &amp;&amp;. We have also written a function for you that returns the value of the dealers up card, called <span class="variables">dealerUpCard()</span>. So, change the if statement to read<br />
<div class="code">if(dealerUpCard() &lt; 7 &amp;&amp; (totalValue() === 10 || totalValue() === 11)){</div><br />
Note the parentheses around the two components of the or statement. This groups the or statement and compares it with the <span class="variables">dealerUpCard()</span> expression using &amp;&amp; to insure that the dealer's up card is less than 7 and your total card value is either 10 or 11. To better understand how these parentheses work, observe that if they were placed like<br />
<div class="code">if((dealerUpCard() &lt; 7 &amp;&amp; totalValue() === 10) || totalValue() === 11){</div><br />
either your total value would have to equal 10 and the dealers up card would have to be less than 7, or your total value would have to equal 11 and the dealer's up card could be anything. If there were no internal parentheses,<br />
<div class="code">if(dealerUpCard() &lt; 7 &amp;&amp; totalValue() === 10 || totalValue() === 11){</div><br />
the code would be evaluated from left to right, which would do the same thing as the previous parenthetical placement. This makes no sense for our purposes, so arrange the parentheses as we had them initially (around the two components of the or statement).</p>
<p>Click submit a few times. Now your program will double down very infrequently, but when it does it will have a good chance of winning. This insures that you make double the money when you can and don't risk losing double the money very often. Nice.</p>

<p>--------------------------------------------------------------------------</p>

<a name="lesson10.1"></a>

<h3>Mission 10.1: Hit or Stand Based on the Dealer's Hand &mdash; More Practice with If Statements and Boolean Expressions</h3>
<p>You're pretty much an if statement master now, so let's use your knowledge to further improve your program's logic. Currently the program hits when you have a total value of no more than 16 and stands otherwise. This is what the dealer is forced to do, so you have no advantage over the dealer. We're going to give you an advantage by changing whether your program hits or stands based on the value of the dealer's face-up card. If the dealer has a high up card, he/she probably will not be required to take a hit and so will probably not bust. Therefore, you will need a high hand to win. However, if the dealer has a low card showing, he/she will have to hit and is likely to bust. Notice that this logic is based on the fact that the most likely card value a player will draw is 10.</p>
<p>Let's take this a step at a time. First, modify your program so it hits if you have a total card value of less than 17 and the dealer's upcard is higher than 6. Here are some helpful hints:</p>
<ul>
<li>You will need to use <span class="variables">dealerUpCard()</span> in addition to <span class="variables">totalValue()</span>.</li>
<li>You only need to change one line!</li>
</ul>
<p>If your code is not working properly, take a look at <a show="hidden-1">this</a> example. This is not the only way to do this. You could also use nested if statements instead of &amp;&amp;s, but that tends to get very messy so &amp;&amp;s are generally preferred.</p>
<div class="hiddencode" id="hidden-1">
var name = "David";

if (handStart) {
       safeBet(4, 0);
}
else {
       /*The only change from the last section is that the following
       line checks both totalValue() and dealerUpCard().*/
       if(totalValue() === 10 &amp;&amp; dealerUpCard() &gt; 6){
               doubleDown();
       }
       else if(totalValue() &lt; 17){
               hit();
       }
       else{
               stand();
       }
}

function safeBet(betAmount, limit){
       if (totalMoney() - betAmount &lt; limit) {
               betAmount = totalMoney() - limit;
       }
       bet(betAmount);
}

function totalValue(){
       var length = handValue.length;
       var sum = 0;
       var counter = 0;
       for (counter = 0; counter &lt; length; counter++) {
               sum = sum + handValue[counter];
       }
       return sum;
}
</div>

<p>--------------------------------------------------------------------------</p>

<a name="lesson10.2"></a>

<h3>Mission 10.2: Hit or Stand Based on the Dealer's Hand &mdash; Even More Practice with If Statements and Boolean Expressions</h3>
Beautiful work, [NAME]. Now let's finish this up. In the last section we said that if the dealer has a low card showing, he/she will have to hit and is likely to bust. So, modify the program so it also hits if the dealer's upcard is less than or equal to 6 and your total value is less than 12.</p>
<p>Combining the instructions from this section and the past one, you need to make the program hit if you have a total card value of less than 17 and the dealer's upcard is higher than 6 and also hit if the dealer's upcard is less than or equal to 6 and your total value is less than 12. Here are some hints:</p>
<ul>
<li>Boolean expressions (and/or) will be the simplest way to make this work, although you can always use nested if-else statements and else if statements in place of boolean expressions.</li>
<li>You can call a function more than once in one program. For example, it is okay to have <span class="variables">hit()</span> inside two different if statements.</li>
<li>You can use different numbers than those we recommended, but make sure your ranges in this part and the last don't overlap or leave gaps.</li>
<li>Take a look at previous missions if you've forgotten how to do something.</li>
</ul>
<p>Don't get discouraged if it doesn't work! This is pretty complicated.</p>
<p>If your code is not working properly, take a look at <a show="holyeffwhyistheresomucheffingcode">these</a> examples.</p>

<div class="hiddencode" id="holyeffwhyistheresomucheffingcode">
Booleans and else if:

name = "David";

if(handStart){
       safeBet(4, 0);
}
else {
       if (totalValue() === 10) {
               doubleDown();
       }
       else if(totalValue() &lt; 17 &amp;&amp; dealerUpCard() &gt; 6){ /*this is the statement
                                                                                                       you wrote last section*/
               hit();
       }
       else if(dealerUpCard() &lt;= 6 &amp;&amp; totalValue() &lt; 12){ /*this is the same statement but
                                               with the new conditions specified in this section. Since both
                                               statements are else ifs, only one of them will be executed.*/
               hit();  /*Notice that hit() has now been called twice in this code. This is
                               perfectly acceptable, and one of the main advantages of methods!*/
       }
       else{
               stand();
       }
}

function safeBet(betAmount, limit){
       if (totalValue() - betAmount &lt; limit) {
               betAmount = totalMoney() - limit;
       }
       bet(betAmount);
}

function totalValue(){
       var length = handValue.length;
       var sum = 0;
       var counter = 0;
       for (counter = 0; counter &lt; length; counter++) {
               sum = sum + handValue[counter];
       }
       return sum;
}

Only booleans:

var name = "David";

if (handStart) {
       safeBet(4, 0);
}
else {
       if (totalValue() === 10) {
               doubleDown();
       }
       /*In this example, the following line is the only one that has been changed from mission 10.1. This
       line is pretty much a direct translation of the the instructions:
               "hits if you have a total card value of less than 17 AND the dealer's upcard is higher than
               6 and it also hits if the dealer's upcard is less than or equal to 6 AND your total value is
               less than 12"
       The two capitalized ANDs have been replaced by &amp;&amp; and the two &amp;&amp; statements are combined with
       a || because either one of them is a sufficient reason to bet. The &amp;&amp; statements are each surounded
       by parentheses so the line is not just evaluated from left to right. Notice how the || effectively
       combines the two else ifs from the previous applications.*/
       else if((totalValue() &lt; 17 &amp;&amp; dealerUpCard() &gt; 6) || (dealerUpCard() &lt;= 6 &amp;&amp; totalValue() &lt; 12)){
               hit();
       }
       else{
               stand();
       }
}

function safeBet(betAmount, limit){
       if (totalMoney() - betAmount &lt; limit) {
               betAmount = totalMoney() - limit;
       }
       bet(betAmount);
}

function totalValue(){
       var length = handValue.length;
       var sum = 0;
       var counter = 0;
       for (counter = 0; counter &lt; length; counter++) {
               sum = sum + handValue[counter];
       }
       return sum;
}
</div>

