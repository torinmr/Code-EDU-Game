<h2>Lesson 7: Cleaning Up Your Code--For Loops and Other Simplifications</h2>
<p>Programmers are lazy. We don't like to type more than we have to if at all possible. As a result, programming languages have many shortucuts. Since you're going to be a programmer, you should learn to be lazy too.</p>
<p>Our totalValue() function could benefit from a few of these shortcuts. First, we'll take a look at the section<br />
<div class="code">$sum = $sum + $handValue[$counter]; 
$counter = $counter + 1;</div><br />
Just look at all that unnecessary repetition! $sum = $sum? Clearly typing that's a waste of effort. Fortunately, we can modify both of those statements using the operator +=. Using this operator, the first line now reads<br />
<div class="code">$sum += $handValue[$counter];</div><br />
This line does exactly the same thing as the line it replaces! Pretty awesome. Change the second line yourself following this example and then press submit. The program will work in exactly the same way. The same thing can be done with the other 4 operators: -=, *=, /=, and %=.</p>
<p>Think that's enough simplification? Wrong. Programmers are even lazier than that. Take a look at the second line, and imagine how often you would have to write<br />
<div class="code">+= 1</div><br />
if you were to keep making loops with counters. Too much work! Try replacing the second line with<br />
<div class="code">$counter++;</div><br />
and press submit. The code does the same thing. This shortcut only exists for incrementing by 1. If you want to increment by any other number, you have to write it out. There is, however, also a shortcut for<br />
<div class="code">$variable -= 1;</div><br />
It is<br />
<div class="code">$variable--;</div></p>
<p>That's as lazy as we're going to get with incrementing, but don't fear! There are more shortcuts to know. Take a look at your while loop. Wouldn't it be better with a couple fewer lines of code? Yes, it would. There is a special kind of while loop for use with counters called a for loop. A for loop basically combines all of the manipulations of the counter variable into one line. The following function is exactly the same as the one you are using with a while loop<br />
<div class="code">function totalValue(){
    $length = sizeof($handValue[]); 
    $sum = 0;
    for($counter = 0; $counter &lt; $length; $counter++){
        $sum += $handValue[$counter]; 
    }
    return $sum;
}</div><br />
Two fewer lines of code as promised! All that happened is "while" was changed to "for" and the initialization and incrementation were moved into the parentheses. So, the basic for loop structure is<br />
<div class="code">for(initialize counter; counter boundary; counter incrementation){

}</div><br />
Note each command in the parentheses is separated by semicolons. Press submit, and notice the program does exactly the same thing with the for loop as it did with the while loop. There are instances when you should use a while loop and not a for loop, but we won't go into them in this tutorial.</p>
<p>Alright, we're satisfied. Enough laziness for now! (It's not all about laziness though...having fewer lines of code is easier to read!)</p>
