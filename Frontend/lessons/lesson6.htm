<h2>Lesson 6: Total Value With More than Two Cards &mdash; Loops</h2>
<p>If you've played the game a few times, you may have noticed that your program does a decent job determing if it should hit or stand the first time, but then keeps making the same decision every time until you bust! That's no good! The problem is that no matter how many card you have, totalValue() is only summing the value of the first two.</p>
<p>An obvious solution is to change the return line in totalValue(){ to<br />
<div class="code">return $handValue[0] + $handValue[1] + $handValue[2];</div><br />
but there are two problems with this. Make this change, click submit, and you'll see the first one. When you have only two cards, $handValue[2] doesn't exist and so the game gives an "undefined" error. The other problem is that it still doesn't work if there are four cards.</p>
<p>We can fix both these problems with loops. There are two kinds of loop. The first and most basic kind is a while loop. It's syntax looks like<br />
<div class="code">while(somethingtrue){

}</div><br />
This should remind you of an if statement. When the computer reaches this while loop, it will do whatever is inside the braces { } over and over as long as the argument inside the parentheses ( ) is true. Once the argument is false, the computer will continue reading the code after the loop. But be careful! If the argument in the parentheses never becomes true, the loop will never end, and the game and possibly even your entire web browser will crash. That would really be a downer.</p>
<p>Delete the return statement in the totalValue() function and replace it with the basic while loop structure. What we are going to do is declare a variable that holds the length of the hand. We will declare another that is a counter which will count how many times we've gone through the loop, and one more that will hold the sum of the values of the cards in your hand. This variable will be returned. To declare these variables, write, immediately before the while loop,<br />
<div class="code">$length = sizeof($handValue[]); //set length to the size of the hand
$counter = 0; //counter variable, starts at 0
$sum = 0; //sum of card values, to be returned</div><br />
The comments don't need to be written, of course, but will be helpful for you. Remember, you can name the variables whatever you want as long as your consistent. Take another look at the first line you just wrote. sizeof() is a function that returns the length of an array. It is built into JavaScript. Observe that $handValue[] is written inside the parentheses of this function. This is known as <em>passing a function a parameter</em>. The function needs to know what array it should find the size of, so we put the array inside its parentheses. You'll learn more about this later. Finally, note that every time this function is called, it will reset $length to the current length of this array. That is important, becuase the size of your hand can change every turn.</p>
<p>Every time we run through the loop, we need to add the value of the current spot in the array to the variable $sum and then increment the counter by one to keep track of our place in the array. Inside the braces { } of the while loop, write<br />
<div class="code">$sum = $sum + $handValue[$counter];
$counter = $counter + 1;</div><br />
The first line sets $sum to itself (initialy zero) plus the value of the card at position counter. This may seem a little strange, but recall that counter is just a variable representing a number. It starts at 0, so this line is initially just like saying <br />
<div class="code">$sum = $sum + $handValue[0];</div><br />
The second line sets $counter to itself plus one, so the second time it runs through the loop the first line will get the value at position 1, the third time will get the value at positon 2, and so on. Remember when we promised you'd see a case where the order of commands was crucial? This is one.  It is important that the adjustment of $counter occurs after that of $sum or else the first spot would be skipped.</p>
<p>Now we just need to replace somethingtrue with a boolean expression telling the computer to run through the loop until it has gone through the whole hand. Since $counter is counting the position in the hand, we can compare this value to $length, the variable that represents the size of the hand. Inside the parentheses following while, write<br />
<div class="code">$counter &lt; $length</div><br />
Why did we use &lt; instead of &lt;=? Remember that $counter, like the positions in an array, start at 0. However, when sizeof() counts an array, it starts at 1. So, if you have an array with 4 items in it, the largest position is 3 and sizeof() will return 4. 3 is the last number that is less than 4, so position 3 is the last position that will be added to $sum. Once $counter is incremented to 4, the statement in the while loop will be false and the loop will be skipped. If you used &lt;=, the computer would try to find something at position 4 and you'd get another undefined error.</p>
<p>Now all that's left is to return $sum, the total value of all cards. After the closing brace of the while loop, write<br />
<div class="code">return $sum;</div><br />
 Press submit, and observe how the computer makes a different decision when you have more cards!</p>
<p>If your code is not working properly, make sure your totalValue() method looks like <a href="">this</a>. We deleted comments since your comments don't need to be identical to ours, but you should keep yours.</p> 
