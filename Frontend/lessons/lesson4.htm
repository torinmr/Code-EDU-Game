<h2>Lesson 4: Better Strategy &mdash; Writing Methods and Introduction to Arrays</h2>
<p>Whew! That was a long lesson. But you did it, and now you're really starting to understand how to use the computer's power for logic. The strategy we just designed is, of course, not a very good one. The value of the last card you were dealt really has very little bearing on whether you should hit because the first card you were dealt could be anything! Let's fix that problem.</p>
<p>The program would work a lot better if it hit every time the TOTAL value of BOTH cards was less than, say, 17, and stand otherwise. (Notice that these are the rules the dealer is playing by. Playing by these rules will improve your chances of winning, but the dealer still has a higher chance because he/she wins ties.) Take a moment and try to figure out what conditional statement should replace <br />
<div class="code">lastDealtCardVal() &lt; 7</div>
to make this work before reading on.</p>
<p>The first part is a bit tricky. Instead of checking the value of the last dealt card, we need to check the value of both cards. So, lastDealtCardVal() needs to be replaced by a function that returns the total value of the two cards. Let's call that function totalValue(). Replace lastDealtCardVal() with totalValue().</p>
<p>The second part is easy. The total value needs to be less than 17, so we just replace 7 with 17! That line should now read<br />
<div class="code">if(totalValue() &lt; 17){</div></p>
<p>Press submit. What happens? The game tells you there is an error because a function is undefined. The problem is that totalValue() doesn't exist! lastDealtCardVal() exists because we wrote it for you, but we didn't write totalValue(). That's your job!</p>
<p>A function is a command that represents a block of code. Every time the command is given, the computer finds where the function is written, does what it says, and then returns to the rest of the code. To start writing a function, go to the end of your code, after the last brace of the else statement, and type
<div class="code">function totalValue(){

}</div><br />
"function" is included at the beginning to tell the computer this is a function. When it sees this, it knows to not read it in the normal sequential progression but instead find it when it is called. The braces { } after totalValue() will contain the code that the function executes.</p>
<p>Let's take a quick break here to discuss naming rules and conventions. When you name a variable or function in JavaScript, you can use letters, numbers, and underscores, but cannot start with a number. Names of two or more words are usually either written with the first word lowercase and the rest capitalized (totalValue) or every word lowercase and separated with an underscore (total_value). You can use either name for totalValue(), but you MUST use the same name every time! That is, if you write <br />
<div class="code">function total_value(){

}</div><br />
here you must write <br />
<div class="code">if(total_value() &lt; 17){</div><br />
above.</p>
<p>Anyway, now we're going to make this function do something. Remember, this function needs to return a value. Between the braces of the function, type<br />
<div class="code">return 3;</div><br />
and run the program. totalValue() now always returns 3 and 3 is less than 17, so the computer will always hit.</p>
<p>You can make the computer evaluate mathematical expressions, too. Replace "3" with "3 + 18" and run the program. Now totalValue() returns the sum of 3 and 18 (21) so the program always stands. In most programming languages, there are 5 mathematical operators available: + is used for addition, - is used for subtraction, * for multiplication, / for division, and % for modulus. Modulus divides the two numbers and returns the remainder.</p>
<p>Ok. We know how to add numbers, but now we need to figure out what the numbers are. Before, you used lastDealtCardVal() to find the value of one card. Unfortunately for you, there's no firstDealtCardVal() function, so you need to understand how the cards in your hand are stored. The values of the cards are stored in an array called handValue. (An array is just a numbered list.) To access something in this array, one types<br />
<div class="code">$handValue[position]</div><br />
where position is replaced by a number or variable representing the spot in the list you want information from. Note the dollar sign is still needed to specify that handValue is a variable. There is one confusing thing here: JavaScript, like many languages, starts numbering arrays at 0. So, the first spot in the array is 0, the second is 1, and so on. This means that $handValue[0] will return the value stored at the first position in the handValue array, that is, the value of the first card in your hand. Likewise, $handValue[1] returns the value of the second card. (That's all that lastDealtCardVal() is doing!)</p>
<p>As you may have guessed, you can add these values together just as you would regular numbers. So, replace<br />
<div class="code">return 3 + 3;</div><br />
with<br />
<div class="code">return $handValue[0] + $handValue[1];</div><br />
<p>This will add the values of your two cards and return them to the boolean expression in the if statement, where it will compare the sum to 17! Click submit, and observe how the computer only hits when the value of both cards is less than 17. This is a pretty simple, but reasonably effective, blackjack strategy! <!--running methods multiple times?--></p>
<p>If your code is not working properly, make sure it looks like <a href="">this</a>.</p> 
{NEXT}