<h2>Lesson 3.3: Hit or Stand &mdash; Conditionals and Returns</h2>
<p>Now it's time to use a <em>boolean expression</em>, or comparison. There are a few comparisons you can make between variables and numbers:<br />
== checks to see if the thing on the left equals the thing on the right and <em>returns</em> true if it is and false if it isn't. "Return" simply means "give the computer a value." (Remember, = is used to asign a value to a variable. It is never used for comparisons.)<br />
&lt; checks to see if the thing on the left is less than the thing on the right and returns true if it is and false if it isn't.<br />
&gt; checks to see if the thing on the left is greater than the thing on the right.<br />
&lt;= checks to see if the thing on the left is less than or equal to the thing on the right.<br />
&gt;= checks to see if the thing on the left is greater than or equal to the thing on the right.<br /></p>
<p>Try replacing true with<br />
<div class="code">3 == 3</div><br />
and press submit. Since 3 does in fact equal 3, the computer will do the same thing! Now, replace one of the 3's with a 4 and press submit. Your player should now stand every time because three does not equal 4, that is, the expression returns false and so the computer skips over the if statement and straight to the else statement. Try experimenting with comparing numbers using &lt;= and other operators.</p>
<p>You can also compare variables. Try replacing the expression inside the parentheses after if with<br />
<div class="code">$name == "yourname"</div><br />
The program will evaluate this as true and hit every turn! Instead of comparing a number to a number, you are comparing a variable to a string. Replace "yourname" with a different string, and it will evaluate as false and the program will stand. Try it!</p>
<p>There's one other cool thing you can do with boolean expressions. What if you wanted to see if something is not equal to something else? An ! means "not" in boolean expressions. So, != checks to see if the thing on the left is NOT equal to the thing on the right and returns true if it is unequal and false if it is equal. Try replacing the == in the statement comparing $name to a string that isn't your name with !=. The computer will now evaluate this statement as true and will once again hit every turn.</p>
<p>Alright, so this is all fine and dandy, but how does it help with blackjack? Let's start with something simple. We wrote a function for you called lastDealtCardVal(). This function does something you haven't seen before: It returns a value just like a boolean expression does. Recall that hit() and stand() simply make stuff happen but don't give any information. A method that returns a value can be set to a variable to store information, like you set "yourname" to $name. For example, if you had a method called findYourName() that returned a string containing your name, you could rewrite the first line as<br />
<div class="code">$name = findYourName();</div><br />
This line would do the same thing. The findYourName function doesn't exist because that would require the computer to read your mind, so don't try this one!</p>
<p>Anyway, lastDealtCardVal() returns the value of the last, in this case second, card you were dealt. For instance, if your last card was a Jack, it would return 10. If it was a 4, it would return 4. A very simple conditional statement for this hit or stand task would be "if the last card dealt to me is less than 7, hit, otherwise, stand." This will increase your winning percentage because if one of your cards is a low number, you are less likely to bust so you can afford to hit. (Of course, this is a very imperfect strategy but we'll get more perfect later.) So, we need to replace somethingtrue with a statement that checks to see how the value of the last card dealt compares to 7. Remember how I said you can assign  lastDealtCardVal() to a variable? Well you can also compare it to a variable or number with the same boolean expressions described above! 
<p>We said we were going to check to see if the value of the last card dealt was less than 7, so replace somethingtrue with<br />
<div class="code">lastDealtCardVal() &lt; 7</div>
Don't delete the parentheses around somethingtrue!</p>
<p>Now, hit submit and play the game a few times. Observe how your program tells the dealer it wants to hit if your card is a 2, 3, 4, 5, or 6 and otherwise stands! (We're counting the ace as an 11 in lastDealtCardVal() and you will continue to do so in the following code we will have you write. The game engine will still count an Ace as 1 or 11, but this is more difficult to deal with, so we won't have you worry about that yet. As a result, your code won't be perfectly evaluating the game, but towards the end of the tutorial we'll have you fix the problem.)</p> 
<p>Notice that, given the 6 comparisons above, there are more ways than one to write the conditional statement inside the parentheses following if. For example, you could say that lastDealtCardVal() should be less than or equal to 6, which is the same thing as saying less than 7 since the values are whole numbers. You could also say 7 is greater than lastDealtCardVal(). What else could you say? Try it out! You can also try numbers other than 6 and see if you win more often!
<p>Before going to the next step, let's talk a little bit about the order the computer does things. The computer starts reading your code at the top and moves down line by line. So, the first thing that happens is you tell the computer your name. Then you tell it to check if it should hit, and finally to stand, if you don't hit. If you change the order of the code, the computer will process things in a different order. For example, if you put the name declaration at the end, it will assign the name after you take a card. The computer is so fast, this probably will be hardly noticeable! You'll see a case when the order is crucial later.</p>
<p>If your code is not working properly, make sure it looks like <a href="">this</a>.</p> 